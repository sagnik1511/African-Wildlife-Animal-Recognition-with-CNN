"""
Model : Pretrained VGG19 Architecture trained on ImageNet
Added Chanegs :
Last layer has been changed with 4 output dense layer 
Final Model Architecture visualized below:



Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         [(None, 256, 256, 3)]     0         
_________________________________________________________________
block1_conv1 (Conv2D)        (None, 256, 256, 64)      1792      
_________________________________________________________________
block1_conv2 (Conv2D)        (None, 256, 256, 64)      36928     
_________________________________________________________________
block1_pool (MaxPooling2D)   (None, 128, 128, 64)      0         
_________________________________________________________________
block2_conv1 (Conv2D)        (None, 128, 128, 128)     73856     
_________________________________________________________________
block2_conv2 (Conv2D)        (None, 128, 128, 128)     147584    
_________________________________________________________________
block2_pool (MaxPooling2D)   (None, 64, 64, 128)       0         
_________________________________________________________________
block3_conv1 (Conv2D)        (None, 64, 64, 256)       295168    
_________________________________________________________________
block3_conv2 (Conv2D)        (None, 64, 64, 256)       590080    
_________________________________________________________________
block3_conv3 (Conv2D)        (None, 64, 64, 256)       590080    
_________________________________________________________________
block3_conv4 (Conv2D)        (None, 64, 64, 256)       590080    
_________________________________________________________________
block3_pool (MaxPooling2D)   (None, 32, 32, 256)       0         
_________________________________________________________________
block4_conv1 (Conv2D)        (None, 32, 32, 512)       1180160   
_________________________________________________________________
block4_conv2 (Conv2D)        (None, 32, 32, 512)       2359808   
_________________________________________________________________
block4_conv3 (Conv2D)        (None, 32, 32, 512)       2359808   
_________________________________________________________________
block4_conv4 (Conv2D)        (None, 32, 32, 512)       2359808   
_________________________________________________________________
block4_pool (MaxPooling2D)   (None, 16, 16, 512)       0         
_________________________________________________________________
block5_conv1 (Conv2D)        (None, 16, 16, 512)       2359808   
_________________________________________________________________
block5_conv2 (Conv2D)        (None, 16, 16, 512)       2359808   
_________________________________________________________________
block5_conv3 (Conv2D)        (None, 16, 16, 512)       2359808   
_________________________________________________________________
block5_conv4 (Conv2D)        (None, 16, 16, 512)       2359808   
_________________________________________________________________
block5_pool (MaxPooling2D)   (None, 8, 8, 512)         0         
_________________________________________________________________
flatten (Flatten)            (None, 32768)             0         
_________________________________________________________________
dense (Dense)                (None, 4096)              134221824 
_________________________________________________________________
dense_1 (Dense)              (None, 4096)              16781312  
_________________________________________________________________
dense_2 (Dense)              (None, 4)                 16388     
=================================================================
Total params: 171,043,908
Trainable params: 151,019,524
Non-trainable params: 20,024,384




Codes are created by ©️ Sagnik Roy 2021 .
Do share your feedbacks.

"""

# Libraries
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import (
    Input , Flatten , Dense
)
from tensorflow.keras.applications.vgg19 import VGG19




# Resets all state generated by keras
keras.backend.clear_session()

# Loading the pretraiined model
model = VGG19(include_top = False , input_tensor = Input(shape = (IMG_HEIGHT , IMG_WIDTH , 3)))

"""
If we train all the model layers we might loose 
the weight distribution might change. 
So, we are setting all the layers non-trainable.
"""
for layer in model.layers:
  layer.trainable = False


# Now adding the last layers which are going to get trained 


vgg19_output = model.output
fl_layer = Flatten()(vgg19_output)
d1_layer =Dense(4096,activation='relu')(fl_layer)
d2_layer = Dense(4096,activation='relu')(d1_layer)
output = Dense(4,activation='softmax')(d2_layer)


# Creating the custom model from VGG19 pretrained Network
clf = Model(inputs = model.input , outputs = output)
clf.summary()
